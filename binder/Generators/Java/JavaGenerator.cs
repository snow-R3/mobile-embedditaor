using System;
using System.Collections.Generic;
using System.Linq;
using CppSharp;
using CppSharp.AST;
using CppSharp.Generators;
using MonoEmbeddinator4000.Passes;

namespace MonoEmbeddinator4000.Generators
{
    public class JavaGenerator : Generator
    {
        public JavaGenerator(BindingContext context) : base(context)
        {
        }

        public override List<CodeGenerator> Generate(IEnumerable<TranslationUnit> units)
        {
            var unit = units.First();
            var sources = new JavaSources(Context, unit);

            return new List<CodeGenerator> { sources };
        }

        public static JavaManagedToNativeTypePrinter GetJavaManagedToNativeTypePrinter()
        {
            return new JavaManagedToNativeTypePrinter
            {
                PrintScopeKind = TypePrintScopeKind.Qualified,
                PrintVariableArrayAsPointers = true
            };
        }

        public override bool SetupPasses()
        {
            Context.TranslationUnitPasses.AddPass(new PropertyToGetterSetterPass());
            return true;
        }

        protected override string TypePrinterDelegate(CppSharp.AST.Type type)
        {
            throw new NotImplementedException();
        }
    }

    public abstract class JavaCodeGenerator : CodeGenerator
    {
        public TranslationUnit Unit;

        public JavaCodeGenerator(BindingContext context, TranslationUnit unit)
            : base(context, unit)
        {
            Unit = unit;
        }

        public CManagedToNativeTypePrinter CTypePrinter =>
                CGenerator.GetCTypePrinter(Options.GeneratorKind);

        public override void GenerateFilePreamble()
        {
            WriteLine("/*");
            WriteLine(" * This is autogenerated code.");
            WriteLine(" * Do not edit this file or all your changes will be lost after re-generation.");
            WriteLine(" */");
        }

        public virtual void GenerateMethodSignature(Method method, bool isSource = true)
        {
            var @class = method.Namespace as Class;
            var retType = method.ReturnType.Visit(CTypePrinter);

            Write("{0}{1} {2}_{3}(", isSource ? string.Empty : "MONO_M2N_API ",
                retType, @class.QualifiedName, method.Name);

            Write(CTypePrinter.VisitParameters(method.Parameters));

            Write(")");
        }

        public override bool VisitTypedefDecl(TypedefDecl typedef)
        {
            return true;
        }

        public override bool VisitNamespace (Namespace @namespace)
        {
            return VisitDeclContext(@namespace);
        }

        public override bool VisitFieldDecl(Field field)
        {
            WriteLine("{0} {1};", field.Type, field.Name);
            return true;
        }

        public override bool VisitProperty(Property property)
        {
            return true;
        }
    }
}
